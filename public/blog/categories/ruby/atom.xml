<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Timothy's Blog]]></title>
  <link href="http://blog.timothyandrew.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.timothyandrew.net/"/>
  <updated>2013-09-11T13:02:24+05:30</updated>
  <id>http://blog.timothyandrew.net/</id>
  <author>
    <name><![CDATA[Timothy Andrew]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pow Over HTTPS]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/07/11/pow-over-https/"/>
    <updated>2013-07-11T12:26:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/07/11/pow-over-https</id>
    <content type="html"><![CDATA[<p>I use <a href="http://pow.cx">Pow</a> to manage web servers on my development machine. It works pretty well.
To start my server, I just hit a URL like <code>http://surveyweb.dev</code>, which starts the server (if it isn't running) and spins it down automatically in 5 minutes.</p>

<p>It doesn't work over HTTPS by default; here's how you get that done.</p>

<p><code>bash
$ gem install tunnels
</code></p>

<p>This gem lets you route traffic from one port to another port.</p>

<p>We need to route traffic from port 443, to port 80 (where the Pow server runs).</p>

<p><code>
$ sudo tunnels 443 80
</code></p>

<p>While the tunnel is open, I can access <code>https://surveyweb.dev</code> just fine.</p>

<p>Pow also has a feature where I can access my server from another machine on the LAN using a URL like <code>http://surveyweb.192.168.1.10.xip.io/</code> where <code>192.168.1.10</code> is the IP address of my machine. Even with the tunnel open, HTTPS doesn't work for this URL.</p>

<p>We need to start another tunnel:</p>

<p><code>
$ sudo tunnels 192.168.1.10:443 127.0.0.1:80 # Replace 192.168.1.10 with your IP address
</code></p>

<p>And now, both URLs work over HTTPS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Custom RSpec Matchers]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/05/01/writing-custom-rspec-matchers/"/>
    <updated>2013-05-01T11:56:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/05/01/writing-custom-rspec-matchers</id>
    <content type="html"><![CDATA[<p>RSpec matchers let you abstract away common assertions in your test code.</p>

<p>For example, we recently had a spec file with a bunch of lines that looked like this:</p>

<p><code>ruby
worksheet.rows[0].cells.map(&amp;:value).should include "Foo"
</code></p>

<p>Which tests if the excel file we're generating (using <a href="https://github.com/randym/axlsx">axlsx</a>) includes <code>Foo</code> in the header row.</p>

<p>That isn't very neat. What if we replace it with this?</p>

<p><code>ruby
worksheet.should have_header_cell "Foo"
</code></p>

<p>That looks a lot better. We can implement this kind of abstraction using custom RSpec matchers.</p>

<p>The matcher for this is as simple as:</p>

<p>```ruby
RSpec::Matchers.define :have_header_cell do |cell_value|
  match do |worksheet|</p>

<pre><code>worksheet.rows[0].cells.map(&amp;:value).include? cell_value
</code></pre>

<p>  end
end
```
RSpec passes in the expected and actual values to these blocks, and our code has to return a boolean representing the result of the assertion.</p>

<p>Now what about assertions that look like this?</p>

<p><code>ruby
worksheet.rows[1].cells.map(&amp;:value).should include "Foo"
worksheet.rows[2].cells.map(&amp;:value).should include "Bar"
worksheet.rows[3].cells.map(&amp;:value).should include "Baz"
</code></p>

<p>The row that we're checking changes for each assertion. Of course, we <em>could</em> create a different matcher for each of these cases, but there's a better way.</p>

<p><code>ruby
worksheet.should have_cell("Foo").in_row 1
worksheet.should have_cell("Bar").in_row 2
worksheet.should have_cell("Baz").in_row 3
</code></p>

<p>RSpec lets you <em>chain</em> custom matchers.</p>

<p>```ruby
RSpec::Matchers.define :have_cell do |expected|
  match do |worksheet|</p>

<pre><code>worksheet.rows[@index].cells.map(&amp;:value).include? expected
</code></pre>

<p>  end</p>

<p>  chain :in_row do |index|</p>

<pre><code>@index = index
</code></pre>

<p>  end</p>

<p>  failure_message_for_should do |actual|</p>

<pre><code>"Expected #{actual} to include #{expected} at row #{@index}."
</code></pre>

<p>  end
end
```</p>

<p>We first store the argument passed in to <code>in_row</code> as an instance variable, and then access it in the main <code>have_cell</code> matcher.</p>

<p>The example also includes a custom error message handler, which properly formats an error message if the assertion fails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAML Serialization for Delayed Job]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/04/28/yaml-serialization-for-delayed-job/"/>
    <updated>2013-04-28T08:08:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/04/28/yaml-serialization-for-delayed-job</id>
    <content type="html"><![CDATA[<p>When we first moved excel generation off to a delayed job on <a href="http://github.com/c42/survey-web">survey-web</a>, we had code that looked like this:</p>

<p><code>ruby
responses = Response.where(:foo =&gt; bar)
Delayed::Job.enqueue(MyCustomJob.new(responses))
</code></p>

<p>And this would bomb with an error like <code>Can't dump anonymous Module</code>.
After some time getting nowhere, we solved it like this:</p>

<p><code>ruby
response_ids = Response.where(:foo =&gt; bar).map(&amp;:id)
Delayed::Job.enqueue(MyCustomJob.new(response_ids))
</code></p>

<p>And in the job:</p>

<p><code>ruby
responses = Response.where('id in (?)', response_ids)
</code></p>

<p>While refactoring a lot of that code over the last few days, we ran into the same issue. But with one difference. A controller spec was failing, but a test for the job which also passed a bunch of responses into it passed.</p>

<p>We wondered if maybe it was because we were passing a relation into the job instead of an array.</p>

<p>So we tried:</p>

<p><code>ruby
responses = Response.where(:foo =&gt; bar).all
Delayed::Job.enqueue(MyCustomJob.new(responses))
</code></p>

<p>And that worked great.</p>

<p>(The files in question are <a href="https://github.com/c42/survey-web/blob/master/app/controllers/responses_controller.rb#L16">here</a> and <a href="https://github.com/c42/survey-web/blob/master/app/models/reports/excel/job.rb%22">here</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing the Server Timeout on EngineYard]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/04/12/changing-the-server-timeout-on-engineyard/"/>
    <updated>2013-04-12T22:29:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/04/12/changing-the-server-timeout-on-engineyard</id>
    <content type="html"><![CDATA[<p>While working on <a href="http://github.com/c42/survey-web">survey-web</a> today, we were stuck for a really long time trying to figure out this problem.</p>

<p>Unless otherwise specified, image uploads while adding a response are capped at 5MB per image.
Adding a larger image (like this 20MB image) should result in a validation error showing up.</p>

<p><img src="/images/2013-04-12-image-too-big.png" alt="Validation Error" /></p>

<p>On production, we'd see this.</p>

<p><img src="/images/2013-04-12-502.png" alt="Production" /></p>

<p>After a <em>lot</em> of digging, including looking at Carrierwave (and <a href="https://github.com/lardawge/carrierwave_backgrounder">Backgrounder</a>), delayed_job server logs, and our controller logic pretty closely, we noticed in <code>production.log</code> that Rails was sending down a <code>200</code>, but the browser was recieving a <code>502</code>.</p>

<p><code>unicorn.log</code> showed that a worker process was being killed with a <code>SIGIOP</code> whenever the error page showed up.</p>

<p>Only then did we realise that the worker was being killed around 60s every time. It had to be a timeout issue.</p>

<p>On EngineYard, the unicorn config already had:</p>

<p>```ruby</p>

<h1>sets the timeout of worker processes to +seconds+.  Workers</h1>

<h1>handling the request/app.call/response cycle taking longer than</h1>

<h1>this time period will be forcibly killed (via SIGKILL).  This</h1>

<h1>timeout is enforced by the master process itself and not subject</h1>

<h1>to the scheduling limitations by the worker process.  Due the</h1>

<h1>low-complexity, low-overhead implementation, timeouts of less</h1>

<h1>than 3.0 seconds can be considered inaccurate and unsafe.</h1>

<p>timeout 180
```
The server didn't seem to be following this configuration.</p>

<p>After a fair bit of googling and help from the <code>#engineyard</code> IRC channel, this is what we did to fix it.
Add the following lines to <code>/data/nginx/nginx.conf</code> inside the <code>http{}</code> block (replacing 300 with the timeout you need).</p>

<p><code>nginx
client_header_timeout 300;
client_body_timeout 300;
send_timeout 300;
</code></p>

<p>And restart nginx/unicorn with</p>

<p><code>bash
$ sudo /etc/init.d/nginx reload
$ /engineyard/bin/app_&lt;app_name&gt; reload
</code></p>
]]></content>
  </entry>
  
</feed>
