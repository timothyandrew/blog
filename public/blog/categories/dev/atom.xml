<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dev | Timothy's Blog]]></title>
  <link href="http://blog.timothyandrew.net/blog/categories/dev/atom.xml" rel="self"/>
  <link href="http://blog.timothyandrew.net/"/>
  <updated>2013-10-30T15:26:55+05:30</updated>
  <id>http://blog.timothyandrew.net/</id>
  <author>
    <name><![CDATA[Timothy Andrew]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Disable the Google Hangouts Menu Bar Icon on OS X]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/10/30/how-to-disable-the-google-hangouts-menu-bar-icon-on-os-x/"/>
    <updated>2013-10-30T15:10:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/10/30/how-to-disable-the-google-hangouts-menu-bar-icon-on-os-x</id>
    <content type="html"><![CDATA[<p>This has been annoying me for weeks now. Google Hangouts would place an menu-bar icon for each instance of Chrome I had running. Repeatedly quitting them didn't have much effect; they'd keep coming back.</p>

<p><img src="/images/hangouts/menubar.png" alt="Menu Bar Screenshot" /></p>

<p>Luckily, there's an easy way to turn off the menu-bar icons.</p>

<ul>
<li>Open Chrome</li>
<li>Menu Bar > Chrome > Preferences</li>
<li>Click on Extensions, scroll down to Hangouts, and click on <em>Options</em></li>
<li>Uncheck <em>Show system tray icon</em></li>
<li>Click <em>OK</em></li>
</ul>


<p>And that's it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encrypt Your Emails on OS X]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/08/13/encrypt-your-emails-on-os-x/"/>
    <updated>2013-08-13T23:14:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/08/13/encrypt-your-emails-on-os-x</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Now that we know that the American government is <a href="http://en.wikipedia.org/wiki/PRISM_(surveillance_program)">probably reading all our email</a>, we should be encrypting all sensitive emails that we send.
At the very least, we should be signing all the email that we send, so that it can't be changed en route.</p>

<p>This guide assumes that you're using a <a href="http://en.wikipedia.org/wiki/Mail_(application)">Mail.app</a> on a Mac, although similar tools exist for Windows and Linux.</p>

<p>First, for those who are unfamiliar with this, here's an (oversimplified) explanation of how encryption works.</p>

<p>A <a href="http://en.wikipedia.org/wiki/Cryptographic_key">key</a> is a randomly generated string of characters which is used to encrypt/decrypt your data.
Every user has a pair of keys. His <em>public key</em> can be freely shared online. His <em>private key</em> is known only to him, and must be safely stored.</p>

<p>Let's consider the classic Alice and Bob example.</p>

<ul>
<li>Alice wants to send a message to Bob</li>
<li>Alice combines her <em>private key</em> with Bob's <em>public key</em> to generate a <em>shared secret</em></li>
<li>Alice encrypts her message with the shared secret and sends it to Bob.</li>
<li>Now the way this works, the same shared secret can also be generated by combining Bob's <em>private key</em> and Alice's <em>public key</em></li>
<li>This means that the message can be decrypted by Bob (assuming he has Alice's private key)</li>
</ul>


<p>So, in practice, this means:</p>

<ul>
<li>You need a private/public key pair</li>
<li>The person you're sending email to needs a private/public key pair</li>
<li>You need to know the public key of the person you're sending email to</li>
<li>That person needs to know your public key</li>
<li>Additionally, your private key is usually encrypted on disk, so you need a password (sometimes called a passphrase) to unlock your private key.</li>
</ul>


<h3>Generating a Key Pair</h3>

<p>First, download and install <a href="https://gpgtools.org/">GPG Suite</a>. Then, the <em>GPG Keychain Access</em> application. This should be present in your <em>Applications</em> folder after you install the GPG Suite.</p>

<p>Click on <em>New</em>, and enter your Name and Email address. <em>Upload public key after generation</em> should be checked. You will also need to pick a passphrase to secure your private key on disk.</p>

<p>You should now have a key pair generated for you. To be safe, use <em>GPG Keychain Access</em> to export your key to a file. Make sure that the <em>Allow secret key export</em> option is checked. This makes sure that your private key is exported as well. This will create a file with an <code>asc</code> extension. Keep this file safe!</p>

<p>Remember, if you lose your private key, you cannot read any encrypted mail sent to you, nor can you send any encrypted email. Ditto for your passphrase.
I use <a href="www.haystacksoftware.com/arq/">Arq</a> to backup my private keys and <a href="https://agilebits.com/onepassword">1Password</a> for my passphrase.</p>

<h3>Getting Another Person's Public Key</h3>

<p>You cannot send an encrypted email to someone unless you know their public key.</p>

<p>To do this, open <em>GPG Keychain Access</em>, and press <em>⌘F</em> to launch the Find dialog. Enter the email address of the person you want to email.
Once the search completes, you can import the public key for the email you entered.</p>

<p>You can also do this manually using a key server like http://pgp.mit.edu/</p>

<h3>Sending an Encrypted Email</h3>

<p>Open/Restart Mail.app. Type <em>⌘N</em> to compose a new mail.
If you set up your keys right, you should see a green <code>OpenPGP</code> on the top right corner of the window.</p>

<p>Once you fill in the <em>To:</em> field with an email address you know the public key for, the little padlock icon on the right should become clickable. Click it.</p>

<p><img src="/images/encryption/2.png" alt="Padlock Icon" /></p>

<p>If the padlock is closed, that means that the email you're about to send is encrypted.</p>

<p>The person you're sending the email to should be able to view the email as normal (using software like GPG Suite to handle decryption).</p>

<p>If someone else were to try and view the email, this is what they would see:</p>

<p><img src="/images/encryption/3.png" alt="Un-Decrypted View" /></p>

<h3>Receiving an Encrypted Email</h3>

<p>Thankfully, there's nothing you have to do here, assuming you have the sender's public key imported into GPG Keychain Access.
GPG Suite will automatically decrypt the email and show it to you. It's seamless!</p>

<p>In fact, here's what the email from the previous screenshot would look like in Mail.app:</p>

<p><img src="/images/encryption/4.png" alt="Decrypted Email" /></p>

<h3>Digital Signatures</h3>

<p>It might not always be practical/necessary to encrypt all your emails.</p>

<p>However, there is an easy way to avoid MITM attacks (man-in-the-middle attacks, where a third-party could modify the text of the email before it reaches you).</p>

<p>Simply <a href="http://en.wikipedia.org/wiki/Digital_signature">(digitally) sign</a> every email you send. GPG Suite makes this very easy. Just make sure the button next to the padlock is clicked:</p>

<p><img src="/images/encryption/5.png" alt="Signature Button" /></p>

<p>Here's what this does:</p>

<ul>
<li>The text of your message is applied to a one-way function, and a <em>digital fingerprint</em> of your message is obtained.</li>
<li>If the text of your message changes even by a single character, this fingerprint ceases to be valid.</li>
<li>The fingerprint is signed with your private key, and is attached with the email in a plain-text file called <code>signature.asc</code></li>
<li>The receiver independently calculates the fingerprint of the message, and also decrypts your <code>signature.asc</code> using your public key.</li>
<li>If the two match, the email was sent by you, and was not tampered with.</li>
</ul>


<p>An email client that supports digital signatures (GPG Suite included) will complain if this verification fails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pow Over HTTPS]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/07/11/pow-over-https/"/>
    <updated>2013-07-11T12:26:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/07/11/pow-over-https</id>
    <content type="html"><![CDATA[<p>I use <a href="http://pow.cx">Pow</a> to manage web servers on my development machine. It works pretty well.
To start my server, I just hit a URL like <code>http://surveyweb.dev</code>, which starts the server (if it isn't running) and spins it down automatically in 5 minutes.</p>

<p>It doesn't work over HTTPS by default; here's how you get that done.</p>

<p><code>bash
$ gem install tunnels
</code></p>

<p>This gem lets you route traffic from one port to another port.</p>

<p>We need to route traffic from port 443, to port 80 (where the Pow server runs).</p>

<p><code>
$ sudo tunnels 443 80
</code></p>

<p>While the tunnel is open, I can access <code>https://surveyweb.dev</code> just fine.</p>

<p>Pow also has a feature where I can access my server from another machine on the LAN using a URL like <code>http://surveyweb.192.168.1.10.xip.io/</code> where <code>192.168.1.10</code> is the IP address of my machine. Even with the tunnel open, HTTPS doesn't work for this URL.</p>

<p>We need to start another tunnel:</p>

<p><code>
$ sudo tunnels 192.168.1.10:443 127.0.0.1:80 # Replace 192.168.1.10 with your IP address
</code></p>

<p>And now, both URLs work over HTTPS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RoboGuice to Inject Views Into a POJO]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/07/10/using-roboguice-to-inject-views-into-a-pojo/"/>
    <updated>2013-07-10T10:50:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/07/10/using-roboguice-to-inject-views-into-a-pojo</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/roboguice/roboguice">RoboGuice</a> is great. It lets you get rid of code like:</p>

<p>```java
public class LoginActivity extends Activity {</p>

<pre><code>private Button mSignInButtonView;

@Override
protected void onCreate(Bundle savedInstanceState) {
    mSignInButtonView = (Button) findViewById(R.id.sign_in_button);
}
</code></pre>

<p>}
```</p>

<p>Instead, with a single line, RoboGuice will take care of injecting that view into your activity:</p>

<p>```java
public class LoginActivity extends RoboActivity {</p>

<pre><code>@InjectView(R.id.sign_in_button) Button mSignInButtonView;

@Override
protected void onCreate(Bundle savedInstanceState) {
    // I have a reference to mSignInButtonView here.
}
</code></pre>

<p>}
```</p>

<p>Now we're rewriting <a href="http://github.com/nilenso/ashoka-survey-mobile">ashoka-survey-mobile</a> as a layered <a href="(http://github.com/nilenso/ashoka-survey-mobile-native">native app</a>).
We have a LoginView (POJO) which needs references to views present on-screen. Normally, we would instantiate the POJO in the activity, and pass it all the views it needs.</p>

<p>But can we do this with RoboGuice? We can't really use <code>@InjectView</code> in a POJO. It needs an Activity context.
The next best thing is to inject the activity into the POJO (RoboGuice is smart enough to inject the correct activity), and pick the views manually using <code>findViewById</code>.</p>

<p>So in the activity:</p>

<p>```java
public class LoginActivity extends RoboActivity {</p>

<pre><code>@Inject LoginView loginView;

@Override
protected void onCreate(Bundle savedInstanceState) {
    loginView.onCreate(); // Need to manually build up the view references inside LoginView
}
</code></pre>

<p>}
```</p>

<p>and in <code>LoginView</code>:</p>

<p>```java
public class LoginView {</p>

<pre><code>@Inject Activity activity; // This gets injected with the correct instance of LoginActivity
private Button buttonView;
private EditText editText;

public void onCreate() {
    buttonView = activity.findViewById(R.id.my_button);
    editText = activity.findViewById(R.id.my_edit_text);
}
</code></pre>

<p>}
```</p>

<p>And then your POJO can manipulate the views that are on-screen as required.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursive Postgres Queries]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/06/24/recursive-postgres-queries/"/>
    <updated>2013-06-24T08:30:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/06/24/recursive-postgres-queries</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>At <a href="http://nilenso.com/">Nilenso</a>, I'm working on an (<a href="http://github.com/nilenso/ashoka-survey-web">open-source!</a>) app to design and conduct surveys.</p>

<p>Here's a simple survey being designed:</p>

<p><a href="/images/recursive-pg/survey-overview.png"><img src="/images/recursive-pg/survey-overview.png" alt="Survey Builder Overview" /></a></p>

<p>Internally, this is represented as:</p>

<p><a href="/images/recursive-pg/internal-survey-overview.png"><img src="/images/recursive-pg/internal-survey-overview.png" alt="Survey Model Overview" /></a></p>

<p>A survey is made up of many <em>questions</em>. A number of questions can (optionally) be grouped together in a <em>category</em>. Our actual data model is a bit more complicated than this (sub-questions, especially), but let's assume that we're just working with questions and categories.</p>

<p>Here's how we preserve the ordering of questions and categories in this survey.</p>

<p>Each question and category has an <code>order_number</code> field. It's an integer that specifies the relative ordering of itself and its siblings.</p>

<p>For example, in this case,</p>

<p><a href="/images/recursive-pg/order-number-overview.png"><img src="/images/recursive-pg/order-number-overview.png" alt="Order Number Overview" /></a></p>

<p>the question <code>Bar</code> will have an <code>order_number</code> that is <em>less than</em> the order number of <code>Baz</code>.</p>

<p>This guarantees that the a category can fetch its sub-questions in the right order:</p>

<p>```ruby</p>

<h1>In category.rb</h1>

<p>def sub_questions_in_order
  questions.order('order_number')
end
<code>``
In fact, this is how we fetch the entire survey at this point. Each category calls</code>sub_questions_in_order` on each of its children, and so on down the entire tree.</p>

<p>This gives us a depth-first ordering of this tree:</p>

<p><a href="/images/recursive-pg/naive-order.png"><img src="/images/recursive-pg/naive-order.png" alt="Naive Ordering" /></a></p>

<p>For large surveys with 5+ levels of nesting, and more than a hundred questions, this is pretty slow.</p>

<!-- more -->


<h3>Recursive Queries</h3>

<p>I've used gems like <a href="https://github.com/collectiveidea/awesome_nested_set"><code>awesome_nested_set</code></a> before, but as far as I could find, none of them supported fetching results across multiple models.</p>

<p>Then I stumbled on <a href="http://www.postgresql.org/docs/9.1/static/queries-with.html">a page</a> describing PostgreSQL's support for recursive queries! That seemed perfect.</p>

<p>Let's solve this particular problem using recursive queries. (My understanding of this is still very basic, so please don't take my word for any of this)</p>

<p>To define a recursive Postgres query, we need to define an initial query, which is called the non-recursive term.</p>

<p>In our case, that would be the top level questions and categories.
Top level elements don't have a parent category, so their <code>category_id</code> is <code>NULL</code>.</p>

<p><code>sql
(
  SELECT id, content, order_number, type, category_id FROM questions
  WHERE questions.survey_id = 2 AND questions.category_id IS NULL
)
UNION
(
  SELECT id, content, order_number, type, category_id FROM categories
  WHERE categories.survey_id = 2 AND categories.category_id IS NULL
)
</code></p>

<p>(That query, and all subsequent ones, assume that the survey we're querying has id = 2)</p>

<p>This gives us the top-level elements.</p>

<p><a href="/images/recursive-pg/top-level-elements-query.png"><img src="/images/recursive-pg/top-level-elements-query.png" alt="Top-Level Queries" /></a></p>

<p>Now on to the recursive term. According to the Postgres docs:</p>

<p><a href="/images/recursive-pg/steps.png"><img src="/images/recursive-pg/steps.png" alt="Postgres Steps" /></a></p>

<p>Our recursive term simply has to find all the direct children of the elements fetched by the non-recursive term.</p>

<p>```sql
WITH RECURSIVE first_level_elements AS (
  -- Non-recursive term
  (</p>

<pre><code>(
  SELECT id, content, order_number, category_id FROM questions
  WHERE questions.survey_id = 2 AND questions.category_id IS NULL
UNION
  SELECT id, content, order_number, category_id FROM categories
  WHERE categories.survey_id = 2 AND categories.category_id IS NULL
)
</code></pre>

<p>  )
  UNION
  -- Recursive Term
  SELECT q.id, q.content, q.order_number, q.category_id
  FROM first_level_elements fle, questions q
  WHERE q.survey_id = 2 AND q.category_id = fle.id
)
SELECT * from first_level_elements;
```</p>

<p>But wait. The recursive term is only fetching questions. What if the child of a first-level category is a category?
Postgres doesn't let us reference the non-recursive term more than once. So doing a <code>UNION</code> of categories and questions is out.
We have to be a little creative here:</p>

<p>```sql
WITH RECURSIVE first_level_elements AS (
  (</p>

<pre><code>(
  SELECT id, content, order_number, category_id FROM questions
  WHERE questions.survey_id = 2 AND questions.category_id IS NULL
UNION
  SELECT id, content, order_number, category_id FROM categories
  WHERE categories.survey_id = 2 AND categories.category_id IS NULL
)
</code></pre>

<p>  )
  UNION
  (</p>

<pre><code>  SELECT e.id, e.content, e.order_number, e.category_id
  FROM
  (
    -- Fetch questions AND categories
    SELECT id, content, order_number, category_id FROM questions WHERE survey_id = 2
    UNION
    SELECT id, content, order_number, category_id FROM categories WHERE survey_id = 2
  ) e, first_level_elements fle
  WHERE e.category_id = fle.id
</code></pre>

<p>  )
)
SELECT * from first_level_elements;
<code>``
We perform a</code>UNION` of categories and questions <em>before</em> joining it with the non-recursive term.</p>

<p>This yields all the survey elements:</p>

<p><a href="/images/recursive-pg/all-elements-without-order-query.png"><img src="/images/recursive-pg/all-elements-without-order-query.png" alt="Query without ordering" /></a></p>

<p>Unfortunately, it looks like the ordering is way off.</p>

<h3>Ordering a Recursive Query</h3>

<p>The problem is that since we're effectively <em>appending</em> second-level elements to first-level elements, we're effectively performing a <a href="https://en.wikipedia.org/wiki/Breadth-first_search"><em>breadth-first search</em></a> instead of a <a href="http://en.wikipedia.org/wiki/Depth-first_search"><em>depth-first search</em></a>.</p>

<p>How can we correct that?</p>

<p>Postgres has <a href="http://www.postgresql.org/docs/9.1/static/arrays.html">arrays</a> that can be built during a query.</p>

<p>Let's build an array of order numbers for each element that we fetch. Let's call this the <code>path</code>. The <code>path</code> for an element is:</p>

<blockquote><p>the path of it's parent category (if one exists) + its own order_number</p></blockquote>

<p>If we sort the final result by <code>path</code>, we've converted it into a depth-first search!</p>

<p>```sql
WITH RECURSIVE first_level_elements AS (
  (</p>

<pre><code>(
  SELECT id, content, category_id, array[id] AS path FROM questions
  WHERE questions.survey_id = 2 AND questions.category_id IS NULL
UNION
  SELECT id, content, category_id, array[id] AS path FROM categories
  WHERE categories.survey_id = 2 AND categories.category_id IS NULL
)
</code></pre>

<p>  )
  UNION
  (</p>

<pre><code>  SELECT e.id, e.content, e.category_id, (fle.path || e.id)
  FROM
  (
    SELECT id, content, category_id, order_number FROM questions WHERE survey_id = 2
    UNION
    SELECT id, content, category_id, order_number FROM categories WHERE survey_id = 2
  ) e, first_level_elements fle
  WHERE e.category_id = fle.id
</code></pre>

<p>  )
)
SELECT * from first_level_elements ORDER BY path;
```</p>

<p><a href="/images/recursive-pg/almost.png"><img src="/images/recursive-pg/almost.png" alt="Query with duplicate" /></a></p>

<p>That's <em>almost</em> right. There are two entries for <em>What's your favourite song?</em></p>

<p>This is happening because when we do an ID comparison to look for children:</p>

<p><code>sql
WHERE e.category_id = fle.id
</code></p>

<p><code>fle</code> contains both questions and categories. But we want this to match only categories (because questions can't have children).</p>

<p>Let's hard-code a type into each of these queries, so that we don't try and check for children of a question:</p>

<p>```sql
WITH RECURSIVE first_level_elements AS (
  (</p>

<pre><code>(
  SELECT id, content, category_id, 'questions' as type, array[id] AS path FROM questions
  WHERE questions.survey_id = 2 AND questions.category_id IS NULL
UNION
  SELECT id, content, category_id, 'categories' as type, array[id] AS path FROM categories
  WHERE categories.survey_id = 2 AND categories.category_id IS NULL
)
</code></pre>

<p>  )
  UNION
  (</p>

<pre><code>  SELECT e.id, e.content, e.category_id, e.type, (fle.path || e.id)
  FROM
  (
    SELECT id, content, category_id, 'questions' as type, order_number FROM questions WHERE survey_id = 2
    UNION
    SELECT id, content, category_id, 'categories' as type, order_number FROM categories WHERE survey_id = 2
  ) e, first_level_elements fle
  -- Look for children only if the type is 'categories'
  WHERE e.category_id = fle.id AND fle.type = 'categories'
</code></pre>

<p>  )
)
SELECT * from first_level_elements ORDER BY path;
```
<a href="/images/recursive-pg/final.png"><img src="/images/recursive-pg/final.png" alt="Final Query" /></a></p>

<p>That seems about right. We're done here.</p>

<p>Let's see how much of a performance boost this gives us.</p>

<h3>Performance</h3>

<p>Using this script (after creating a survey from the UI), I generated 10 sub-question chains; each 6 levels deep.</p>

<p>```ruby
survey = Survey.find(9)
10.times do
  category = FactoryGirl.create(:category, :survey => survey)
  6.times do</p>

<pre><code>category = FactoryGirl.create(:category, :category =&gt; category, :survey =&gt; survey)
</code></pre>

<p>  end
  FactoryGirl.create(:single_line_question, :category_id => category.id, :survey_id => survey.id)
end
```</p>

<p>Each chain looks like this:</p>

<p><a href="/images/recursive-pg/chain.png"><img src="/images/recursive-pg/chain.png" alt="Sub-question Chain" /></a></p>

<p>Let's see if recursive queries are faster.</p>

<p>```ruby
pry(main)> Benchmark.ms { 5.times { Survey.find(9).sub_questions_using_recursive_queries }}
=> 36.839999999999996</p>

<p>pry(main)> Benchmark.ms { 5.times { Survey.find(9).sub_questions_in_order } }
=> 1145.1309999999999
```</p>

<p>31x faster? Not bad.</p>

<p><a href="/images/recursive-pg/not-bad.jpg"><img src="/images/recursive-pg/not-bad.jpg" alt="Not bad" /></a></p>
]]></content>
  </entry>
  
</feed>
