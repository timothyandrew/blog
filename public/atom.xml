<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Timothy's Blog]]></title>
  <link href="http://blog.timothyandrew.net/atom.xml" rel="self"/>
  <link href="http://blog.timothyandrew.net/"/>
  <updated>2013-07-11T12:37:19+05:30</updated>
  <id>http://blog.timothyandrew.net/</id>
  <author>
    <name><![CDATA[Timothy Andrew]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pow Over HTTPS]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/07/11/pow-over-https/"/>
    <updated>2013-07-11T12:26:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/07/11/pow-over-https</id>
    <content type="html"><![CDATA[<p>I use <a href="http://pow.cx">Pow</a> to manage web servers on my development machine. It works pretty well.
To start my server, I just hit a URL like <code>http://surveyweb.dev</code>, which starts the server (if it isn&#8217;t running) and spins it down automatically in 5 minutes.</p>

<p>It doesn&#8217;t work over HTTPS by default; here&#8217;s how you get that done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install tunnels
</span></code></pre></td></tr></table></div></figure>


<p>This gem lets you route traffic from one port to another port.</p>

<p>We need to route traffic from port 443, to port 80 (where the Pow server runs).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo tunnels 443 80
</span></code></pre></td></tr></table></div></figure>


<p>While the tunnel is open, I can access <code>https://surveyweb.dev</code> just fine.</p>

<p>Pow also has a feature where I can access my server from another machine on the LAN using a URL like <code>http://surveyweb.192.168.1.10.xip.io/</code> where <code>192.168.1.10</code> is the IP address of my machine. Even with the tunnel open, HTTPS doesn&#8217;t work for this URL.</p>

<p>We need to start another tunnel:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo tunnels 192.168.1.10:443 127.0.0.1:80 <span class="c"># Replace 192.168.1.10 with your IP address</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now, both URLs work over HTTPS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RoboGuice to Inject Views Into a POJO]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/07/10/using-roboguice-to-inject-views-into-a-pojo/"/>
    <updated>2013-07-10T10:50:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/07/10/using-roboguice-to-inject-views-into-a-pojo</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/roboguice/roboguice">RoboGuice</a> is great. It lets you get rid of code like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Button</span> <span class="n">mSignInButtonView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mSignInButtonView</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">sign_in_button</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead, with a single line, RoboGuice will take care of injecting that view into your activity:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginActivity</span> <span class="kd">extends</span> <span class="n">RoboActivity</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@InjectView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">sign_in_button</span><span class="o">)</span> <span class="n">Button</span> <span class="n">mSignInButtonView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// I have a reference to mSignInButtonView here.</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&#8217;re rewriting <a href="http://github.com/nilenso/ashoka-survey-mobile">ashoka-survey-mobile</a> as a layered <a href="(http://github.com/nilenso/ashoka-survey-mobile-native">native app</a>).
We have a LoginView (POJO) which needs references to views present on-screen. Normally, we would instantiate the POJO in the activity, and pass it all the views it needs.</p>

<p>But can we do this with RoboGuice? We can&#8217;t really use <code>@InjectView</code> in a POJO. It needs an Activity context.
The next best thing is to inject the activity into the POJO (RoboGuice is smart enough to inject the correct activity), and pick the views manually using <code>findViewById</code>.</p>

<p>So in the activity:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginActivity</span> <span class="kd">extends</span> <span class="n">RoboActivity</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Inject</span> <span class="n">LoginView</span> <span class="n">loginView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">loginView</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span> <span class="c1">// Need to manually build up the view references inside LoginView</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and in <code>LoginView</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginView</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Inject</span> <span class="n">Activity</span> <span class="n">activity</span><span class="o">;</span> <span class="c1">// This gets injected with the correct instance of LoginActivity</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Button</span> <span class="n">buttonView</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">EditText</span> <span class="n">editText</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">buttonView</span> <span class="o">=</span> <span class="n">activity</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">my_button</span><span class="o">);</span>
</span><span class='line'>        <span class="n">editText</span> <span class="o">=</span> <span class="n">activity</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">my_edit_text</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then your POJO can manipulate the views that are on-screen as required.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursive Postgres Queries]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/06/24/recursive-postgres-queries/"/>
    <updated>2013-06-24T08:30:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/06/24/recursive-postgres-queries</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>At <a href="http://nilenso.com/">Nilenso</a>, I&#8217;m working on an (<a href="http://github.com/nilenso/ashoka-survey-web">open-source!</a>) app to design and conduct surveys.</p>

<p>Here&#8217;s a simple survey being designed:</p>

<p><a href="http://blog.timothyandrew.net/images/recursive-pg/survey-overview.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/survey-overview.png" alt="Survey Builder Overview" /></a></p>

<p>Internally, this is represented as:</p>

<p><a href="http://blog.timothyandrew.net/images/recursive-pg/internal-survey-overview.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/internal-survey-overview.png" alt="Survey Model Overview" /></a></p>

<p>A survey is made up of many <em>questions</em>. A number of questions can (optionally) be grouped together in a <em>category</em>. Our actual data model is a bit more complicated than this (sub-questions, especially), but let&#8217;s assume that we&#8217;re just working with questions and categories.</p>

<p>Here&#8217;s how we preserve the ordering of questions and categories in this survey.</p>

<p>Each question and category has an <code>order_number</code> field. It&#8217;s an integer that specifies the relative ordering of itself and its siblings.</p>

<p>For example, in this case,</p>

<p><a href="http://blog.timothyandrew.net/images/recursive-pg/order-number-overview.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/order-number-overview.png" alt="Order Number Overview" /></a></p>

<p>the question <code>Bar</code> will have an <code>order_number</code> that is <em>less than</em> the order number of <code>Baz</code>.</p>

<p>This guarantees that the a category can fetch its sub-questions in the right order:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># In category.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sub_questions_in_order</span>
</span><span class='line'>  <span class="n">questions</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s1">&#39;order_number&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, this is how we fetch the entire survey at this point. Each category calls <code>sub_questions_in_order</code> on each of its children, and so on down the entire tree.</p>

<p>This gives us a depth-first ordering of this tree:</p>

<p><a href="http://blog.timothyandrew.net/images/recursive-pg/naive-order.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/naive-order.png" alt="Naive Ordering" /></a></p>

<p>For large surveys with 5+ levels of nesting, and more than a hundred questions, this is pretty slow.</p>

<!-- more -->


<h3>Recursive Queries</h3>

<p>I&#8217;ve used gems like <a href="https://github.com/collectiveidea/awesome_nested_set"><code>awesome_nested_set</code></a> before, but as far as I could find, none of them supported fetching results across multiple models.</p>

<p>Then I stumbled on <a href="http://www.postgresql.org/docs/9.1/static/queries-with.html">a page</a> describing PostgreSQL&#8217;s support for recursive queries! That seemed perfect.</p>

<p>Let&#8217;s solve this particular problem using recursive queries. (My understanding of this is still very basic, so please don&#8217;t take my word for any of this)</p>

<p>To define a recursive Postgres query, we need to define an initial query, which is called the non-recursive term.</p>

<p>In our case, that would be the top level questions and categories.
Top level elements don&#8217;t have a parent category, so their <code>category_id</code> is <code>NULL</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">order_number</span><span class="p">,</span> <span class="k">type</span><span class="p">,</span> <span class="n">category_id</span> <span class="k">FROM</span> <span class="n">questions</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">questions</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">questions</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">UNION</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">order_number</span><span class="p">,</span> <span class="k">type</span><span class="p">,</span> <span class="n">category_id</span> <span class="k">FROM</span> <span class="n">categories</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">categories</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">categories</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(That query, and all subsequent ones, assume that the survey we&#8217;re querying has id = 2)</p>

<p>This gives us the top-level elements.</p>

<p><a href="http://blog.timothyandrew.net/images/recursive-pg/top-level-elements-query.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/top-level-elements-query.png" alt="Top-Level Queries" /></a></p>

<p>Now on to the recursive term. According to the Postgres docs:</p>

<p><a href="http://blog.timothyandrew.net/images/recursive-pg/steps.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/steps.png" alt="Postgres Steps" /></a></p>

<p>Our recursive term simply has to find all the direct children of the elements fetched by the non-recursive term.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="n">first_level_elements</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'>  <span class="c1">-- Non-recursive term</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">order_number</span><span class="p">,</span> <span class="n">category_id</span> <span class="k">FROM</span> <span class="n">questions</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">questions</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">questions</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'>    <span class="k">UNION</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">order_number</span><span class="p">,</span> <span class="n">category_id</span> <span class="k">FROM</span> <span class="n">categories</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">categories</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">categories</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="k">UNION</span>
</span><span class='line'>  <span class="c1">-- Recursive Term</span>
</span><span class='line'>  <span class="k">SELECT</span> <span class="n">q</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">q</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="n">q</span><span class="p">.</span><span class="n">order_number</span><span class="p">,</span> <span class="n">q</span><span class="p">.</span><span class="n">category_id</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">first_level_elements</span> <span class="n">fle</span><span class="p">,</span> <span class="n">questions</span> <span class="n">q</span>
</span><span class='line'>  <span class="k">WHERE</span> <span class="n">q</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">q</span><span class="p">.</span><span class="n">category_id</span> <span class="o">=</span> <span class="n">fle</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">first_level_elements</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But wait. The recursive term is only fetching questions. What if the child of a first-level category is a category?
Postgres doesn&#8217;t let us reference the non-recursive term more than once. So doing a <code>UNION</code> of categories and questions is out.
We have to be a little creative here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="n">first_level_elements</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">order_number</span><span class="p">,</span> <span class="n">category_id</span> <span class="k">FROM</span> <span class="n">questions</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">questions</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">questions</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'>    <span class="k">UNION</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">order_number</span><span class="p">,</span> <span class="n">category_id</span> <span class="k">FROM</span> <span class="n">categories</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">categories</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">categories</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="k">UNION</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">order_number</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">category_id</span>
</span><span class='line'>      <span class="k">FROM</span>
</span><span class='line'>      <span class="p">(</span>
</span><span class='line'>        <span class="c1">-- Fetch questions AND categories</span>
</span><span class='line'>        <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">order_number</span><span class="p">,</span> <span class="n">category_id</span> <span class="k">FROM</span> <span class="n">questions</span> <span class="k">WHERE</span> <span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">UNION</span>
</span><span class='line'>        <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">order_number</span><span class="p">,</span> <span class="n">category_id</span> <span class="k">FROM</span> <span class="n">categories</span> <span class="k">WHERE</span> <span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="p">)</span> <span class="n">e</span><span class="p">,</span> <span class="n">first_level_elements</span> <span class="n">fle</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">category_id</span> <span class="o">=</span> <span class="n">fle</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">first_level_elements</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We perform a <code>UNION</code> of categories and questions <em>before</em> joining it with the non-recursive term.</p>

<p>This yields all the survey elements:</p>

<p><a href="http://blog.timothyandrew.net/images/recursive-pg/all-elements-without-order-query.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/all-elements-without-order-query.png" alt="Query without ordering" /></a></p>

<p>Unfortunately, it looks like the ordering is way off.</p>

<h3>Ordering a Recursive Query</h3>

<p>The problem is that since we&#8217;re effectively <em>appending</em> second-level elements to first-level elements, we&#8217;re effectively performing a <a href="https://en.wikipedia.org/wiki/Breadth-first_search"><em>breadth-first search</em></a> instead of a <a href="http://en.wikipedia.org/wiki/Depth-first_search"><em>depth-first search</em></a>.</p>

<p>How can we correct that?</p>

<p>Postgres has <a href="http://www.postgresql.org/docs/9.1/static/arrays.html">arrays</a> that can be built during a query.</p>

<p>Let&#8217;s build an array of order numbers for each element that we fetch. Let&#8217;s call this the <code>path</code>. The <code>path</code> for an element is:</p>

<blockquote><p>the path of it&#8217;s parent category (if one exists) + its own order_number</p></blockquote>

<p>If we sort the final result by <code>path</code>, we&#8217;ve converted it into a depth-first search!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="n">first_level_elements</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">category_id</span><span class="p">,</span> <span class="nb">array</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="k">AS</span> <span class="n">path</span> <span class="k">FROM</span> <span class="n">questions</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">questions</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">questions</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'>    <span class="k">UNION</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">category_id</span><span class="p">,</span> <span class="nb">array</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="k">AS</span> <span class="n">path</span> <span class="k">FROM</span> <span class="n">categories</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">categories</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">categories</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="k">UNION</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">category_id</span><span class="p">,</span> <span class="p">(</span><span class="n">fle</span><span class="p">.</span><span class="n">path</span> <span class="o">||</span> <span class="n">e</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="k">FROM</span>
</span><span class='line'>      <span class="p">(</span>
</span><span class='line'>        <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">category_id</span><span class="p">,</span> <span class="n">order_number</span> <span class="k">FROM</span> <span class="n">questions</span> <span class="k">WHERE</span> <span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">UNION</span>
</span><span class='line'>        <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">category_id</span><span class="p">,</span> <span class="n">order_number</span> <span class="k">FROM</span> <span class="n">categories</span> <span class="k">WHERE</span> <span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="p">)</span> <span class="n">e</span><span class="p">,</span> <span class="n">first_level_elements</span> <span class="n">fle</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">category_id</span> <span class="o">=</span> <span class="n">fle</span><span class="p">.</span><span class="n">id</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">first_level_elements</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">path</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.timothyandrew.net/images/recursive-pg/almost.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/almost.png" alt="Query with duplicate" /></a></p>

<p>That&#8217;s <em>almost</em> right. There are two entries for <em>What&#8217;s your favourite song?</em></p>

<p>This is happening because when we do an ID comparison to look for children:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">category_id</span> <span class="o">=</span> <span class="n">fle</span><span class="p">.</span><span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>fle</code> contains both questions and categories. But we want this to match only categories (because questions can&#8217;t have children).</p>

<p>Let&#8217;s hard-code a type into each of these queries, so that we don&#8217;t try and check for children of a question:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">WITH</span> <span class="k">RECURSIVE</span> <span class="n">first_level_elements</span> <span class="k">AS</span> <span class="p">(</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">category_id</span><span class="p">,</span> <span class="s1">&#39;questions&#39;</span> <span class="k">as</span> <span class="k">type</span><span class="p">,</span> <span class="nb">array</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="k">AS</span> <span class="n">path</span> <span class="k">FROM</span> <span class="n">questions</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">questions</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">questions</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'>    <span class="k">UNION</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">category_id</span><span class="p">,</span> <span class="s1">&#39;categories&#39;</span> <span class="k">as</span> <span class="k">type</span><span class="p">,</span> <span class="nb">array</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="k">AS</span> <span class="n">path</span> <span class="k">FROM</span> <span class="n">categories</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">categories</span><span class="p">.</span><span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">categories</span><span class="p">.</span><span class="n">category_id</span> <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="k">UNION</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>      <span class="k">SELECT</span> <span class="n">e</span><span class="p">.</span><span class="n">id</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">category_id</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="k">type</span><span class="p">,</span> <span class="p">(</span><span class="n">fle</span><span class="p">.</span><span class="n">path</span> <span class="o">||</span> <span class="n">e</span><span class="p">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>      <span class="k">FROM</span>
</span><span class='line'>      <span class="p">(</span>
</span><span class='line'>        <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">category_id</span><span class="p">,</span> <span class="s1">&#39;questions&#39;</span> <span class="k">as</span> <span class="k">type</span><span class="p">,</span> <span class="n">order_number</span> <span class="k">FROM</span> <span class="n">questions</span> <span class="k">WHERE</span> <span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>        <span class="k">UNION</span>
</span><span class='line'>        <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">category_id</span><span class="p">,</span> <span class="s1">&#39;categories&#39;</span> <span class="k">as</span> <span class="k">type</span><span class="p">,</span> <span class="n">order_number</span> <span class="k">FROM</span> <span class="n">categories</span> <span class="k">WHERE</span> <span class="n">survey_id</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>      <span class="p">)</span> <span class="n">e</span><span class="p">,</span> <span class="n">first_level_elements</span> <span class="n">fle</span>
</span><span class='line'>      <span class="c1">-- Look for children only if the type is &#39;categories&#39;</span>
</span><span class='line'>      <span class="k">WHERE</span> <span class="n">e</span><span class="p">.</span><span class="n">category_id</span> <span class="o">=</span> <span class="n">fle</span><span class="p">.</span><span class="n">id</span> <span class="k">AND</span> <span class="n">fle</span><span class="p">.</span><span class="k">type</span> <span class="o">=</span> <span class="s1">&#39;categories&#39;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">from</span> <span class="n">first_level_elements</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">path</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.timothyandrew.net/images/recursive-pg/final.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/final.png" alt="Final Query" /></a></p>

<p>That seems about right. We&#8217;re done here.</p>

<p>Let&#8217;s see how much of a performance boost this gives us.</p>

<h3>Performance</h3>

<p>Using this script (after creating a survey from the UI), I generated 10 sub-question chains; each 6 levels deep.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">survey</span> <span class="o">=</span> <span class="no">Survey</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">category</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:category</span><span class="p">,</span> <span class="ss">:survey</span> <span class="o">=&gt;</span> <span class="n">survey</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">6</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">category</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:category</span><span class="p">,</span> <span class="ss">:category</span> <span class="o">=&gt;</span> <span class="n">category</span><span class="p">,</span> <span class="ss">:survey</span> <span class="o">=&gt;</span> <span class="n">survey</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:single_line_question</span><span class="p">,</span> <span class="ss">:category_id</span> <span class="o">=&gt;</span> <span class="n">category</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:survey_id</span> <span class="o">=&gt;</span> <span class="n">survey</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each chain looks like this:</p>

<p><a href="http://blog.timothyandrew.net/images/recursive-pg/chain.png"><img src="http://blog.timothyandrew.net/images/recursive-pg/chain.png" alt="Sub-question Chain" /></a></p>

<p>Let&#8217;s see if recursive queries are faster.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Benchmark</span><span class="o">.</span><span class="n">ms</span> <span class="p">{</span> <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="no">Survey</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">sub_questions_using_recursive_queries</span> <span class="p">}}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">36</span><span class="o">.</span><span class="mi">839999999999996</span>
</span><span class='line'>
</span><span class='line'><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Benchmark</span><span class="o">.</span><span class="n">ms</span> <span class="p">{</span> <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="no">Survey</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">sub_questions_in_order</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1145</span><span class="o">.</span><span class="mi">1309999999999</span>
</span></code></pre></td></tr></table></div></figure>


<p>31x faster? Not bad.</p>

<p><a href="http://blog.timothyandrew.net/images/recursive-pg/not-bad.jpg"><img src="http://blog.timothyandrew.net/images/recursive-pg/not-bad.jpg" alt="Not bad" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turning Your Local Git Repo Into a Remote]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/05/09/turning-your-local-git-repo-into-a-remote/"/>
    <updated>2013-05-09T20:18:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/05/09/turning-your-local-git-repo-into-a-remote</id>
    <content type="html"><![CDATA[<p>Need to pull some changes from a friend&#8217;s local Git repo without having to push to <code>origin</code>? This post will show you how to do that.</p>

<p>You can access a local Git repo using SSH, but setting up keys and such will probably take some time. For a quick-and-dirty solution, HTTP is <em>much</em> easier.</p>

<p>On the machine you want to use as the server, navigate to your project and then into the <code>.git</code> directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/project
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> .git
</span></code></pre></td></tr></table></div></figure>


<p>Stand up a HTTP server using Python&#8217;s <code>SimpleHTTPServer</code> module. You can use any port number you like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python -m SimpleHTTPServer 5000
</span></code></pre></td></tr></table></div></figure>


<p>You&#8217;ll need the IP address of this machine as well. (Use <code>ifconfig</code>)</p>

<p>Make sure you can access the python server from a browser on the client machine. You should be able to see something like this at <code>http://ip.address:5000/</code></p>

<p><img src="images/2013-05-09-python-server.png" alt="Python Server Browser Screenshot" /></p>

<p>On the client, you should be now able to access the git repo over HTTP as though it were a normal git remote.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git ls-remote http://ip.address:5000
</span><span class='line'><span class="nv">$ </span>git pull http://ip.address:5000 master
</span></code></pre></td></tr></table></div></figure>


<p>Add it as a remote to avoid typing out the entire IP each time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote add http://ip.address:5000 <span class="nb">local</span>-foo
</span><span class='line'><span class="nv">$ </span>git pull <span class="nb">local</span>-foo master
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Custom RSpec Matchers]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/05/01/writing-custom-rspec-matchers/"/>
    <updated>2013-05-01T11:56:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/05/01/writing-custom-rspec-matchers</id>
    <content type="html"><![CDATA[<p>RSpec matchers let you abstract away common assertions in your test code.</p>

<p>For example, we recently had a spec file with a bunch of lines that looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worksheet</span><span class="o">.</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">cells</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:value</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span> <span class="s2">&quot;Foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which tests if the excel file we&#8217;re generating (using <a href="https://github.com/randym/axlsx">axlsx</a>) includes <code>Foo</code> in the header row.</p>

<p>That isn&#8217;t very neat. What if we replace it with this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worksheet</span><span class="o">.</span><span class="n">should</span> <span class="n">have_header_cell</span> <span class="s2">&quot;Foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That looks a lot better. We can implement this kind of abstraction using custom RSpec matchers.</p>

<p>The matcher for this is as simple as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Matchers</span><span class="o">.</span><span class="n">define</span> <span class="ss">:have_header_cell</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell_value</span><span class="o">|</span>
</span><span class='line'>  <span class="n">match</span> <span class="k">do</span> <span class="o">|</span><span class="n">worksheet</span><span class="o">|</span>
</span><span class='line'>    <span class="n">worksheet</span><span class="o">.</span><span class="n">rows</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">cells</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:value</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span> <span class="n">cell_value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>RSpec passes in the expected and actual values to these blocks, and our code has to return a boolean representing the result of the assertion.</p>

<p>Now what about assertions that look like this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worksheet</span><span class="o">.</span><span class="n">rows</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">cells</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:value</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span> <span class="s2">&quot;Foo&quot;</span>
</span><span class='line'><span class="n">worksheet</span><span class="o">.</span><span class="n">rows</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">cells</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:value</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span> <span class="s2">&quot;Bar&quot;</span>
</span><span class='line'><span class="n">worksheet</span><span class="o">.</span><span class="n">rows</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="n">cells</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:value</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span> <span class="s2">&quot;Baz&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The row that we&#8217;re checking changes for each assertion. Of course, we <em>could</em> create a different matcher for each of these cases, but there&#8217;s a better way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">worksheet</span><span class="o">.</span><span class="n">should</span> <span class="n">have_cell</span><span class="p">(</span><span class="s2">&quot;Foo&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">in_row</span> <span class="mi">1</span>
</span><span class='line'><span class="n">worksheet</span><span class="o">.</span><span class="n">should</span> <span class="n">have_cell</span><span class="p">(</span><span class="s2">&quot;Bar&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">in_row</span> <span class="mi">2</span>
</span><span class='line'><span class="n">worksheet</span><span class="o">.</span><span class="n">should</span> <span class="n">have_cell</span><span class="p">(</span><span class="s2">&quot;Baz&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">in_row</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>RSpec lets you <em>chain</em> custom matchers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Matchers</span><span class="o">.</span><span class="n">define</span> <span class="ss">:have_cell</span> <span class="k">do</span> <span class="o">|</span><span class="n">expected</span><span class="o">|</span>
</span><span class='line'>  <span class="n">match</span> <span class="k">do</span> <span class="o">|</span><span class="n">worksheet</span><span class="o">|</span>
</span><span class='line'>    <span class="n">worksheet</span><span class="o">.</span><span class="n">rows</span><span class="o">[</span><span class="vi">@index</span><span class="o">].</span><span class="n">cells</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:value</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span> <span class="n">expected</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">chain</span> <span class="ss">:in_row</span> <span class="k">do</span> <span class="o">|</span><span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@index</span> <span class="o">=</span> <span class="n">index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">failure_message_for_should</span> <span class="k">do</span> <span class="o">|</span><span class="n">actual</span><span class="o">|</span>
</span><span class='line'>    <span class="s2">&quot;Expected </span><span class="si">#{</span><span class="n">actual</span><span class="si">}</span><span class="s2"> to include </span><span class="si">#{</span><span class="n">expected</span><span class="si">}</span><span class="s2"> at row </span><span class="si">#{</span><span class="vi">@index</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We first store the argument passed in to <code>in_row</code> as an instance variable, and then access it in the main <code>have_cell</code> matcher.</p>

<p>The example also includes a custom error message handler, which properly formats an error message if the assertion fails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAML Serialization for Delayed Job]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/04/28/yaml-serialization-for-delayed-job/"/>
    <updated>2013-04-28T08:08:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/04/28/yaml-serialization-for-delayed-job</id>
    <content type="html"><![CDATA[<p>When we first moved excel generation off to a delayed job on <a href="http://github.com/c42/survey-web">survey-web</a>, we had code that looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">responses</span> <span class="o">=</span> <span class="no">Response</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="n">bar</span><span class="p">)</span>
</span><span class='line'><span class="ss">Delayed</span><span class="p">:</span><span class="ss">:Job</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">MyCustomJob</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">responses</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this would bomb with an error like <code>Can't dump anonymous Module</code>.<br/>
After some time getting nowhere, we solved it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">response_ids</span> <span class="o">=</span> <span class="no">Response</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="n">bar</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'><span class="ss">Delayed</span><span class="p">:</span><span class="ss">:Job</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">MyCustomJob</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">response_ids</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in the job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">responses</span> <span class="o">=</span> <span class="no">Response</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;id in (?)&#39;</span><span class="p">,</span> <span class="n">response_ids</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While refactoring a lot of that code over the last few days, we ran into the same issue. But with one difference. A controller spec was failing, but a test for the job which also passed a bunch of responses into it passed.</p>

<p>We wondered if maybe it was because we were passing a relation into the job instead of an array.</p>

<p>So we tried:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">responses</span> <span class="o">=</span> <span class="no">Response</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:foo</span> <span class="o">=&gt;</span> <span class="n">bar</span><span class="p">)</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="ss">Delayed</span><span class="p">:</span><span class="ss">:Job</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="no">MyCustomJob</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">responses</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that worked great.</p>

<p>(The files in question are <a href="https://github.com/c42/survey-web/blob/master/app/controllers/responses_controller.rb#L16">here</a> and <a href="https://github.com/c42/survey-web/blob/master/app/models/reports/excel/job.rb%22">here</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing the Server Timeout on EngineYard]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/04/12/changing-the-server-timeout-on-engineyard/"/>
    <updated>2013-04-12T22:29:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/04/12/changing-the-server-timeout-on-engineyard</id>
    <content type="html"><![CDATA[<p>While working on <a href="http://github.com/c42/survey-web">survey-web</a> today, we were stuck for a really long time trying to figure out this problem.</p>

<p>Unless otherwise specified, image uploads while adding a response are capped at 5MB per image.
Adding a larger image (like this 20MB image) should result in a validation error showing up.</p>

<p><img src="http://blog.timothyandrew.net/images/2013-04-12-image-too-big.png" alt="Validation Error" /></p>

<p>On production, we&#8217;d see this.</p>

<p><img src="http://blog.timothyandrew.net/images/2013-04-12-502.png" alt="Production" /></p>

<p>After a <em>lot</em> of digging, including looking at Carrierwave (and <a href="https://github.com/lardawge/carrierwave_backgrounder">Backgrounder</a>), delayed_job server logs, and our controller logic pretty closely, we noticed in <code>production.log</code> that Rails was sending down a <code>200</code>, but the browser was recieving a <code>502</code>.</p>

<p><code>unicorn.log</code> showed that a worker process was being killed with a <code>SIGIOP</code> whenever the error page showed up.</p>

<p>Only then did we realise that the worker was being killed around 60s every time. It had to be a timeout issue.</p>

<p>On EngineYard, the unicorn config already had:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># sets the timeout of worker processes to +seconds+.  Workers</span>
</span><span class='line'><span class="c1"># handling the request/app.call/response cycle taking longer than</span>
</span><span class='line'><span class="c1"># this time period will be forcibly killed (via SIGKILL).  This</span>
</span><span class='line'><span class="c1"># timeout is enforced by the master process itself and not subject</span>
</span><span class='line'><span class="c1"># to the scheduling limitations by the worker process.  Due the</span>
</span><span class='line'><span class="c1"># low-complexity, low-overhead implementation, timeouts of less</span>
</span><span class='line'><span class="c1"># than 3.0 seconds can be considered inaccurate and unsafe.</span>
</span><span class='line'><span class="n">timeout</span> <span class="mi">180</span>
</span></code></pre></td></tr></table></div></figure>


<p>The server didn&#8217;t seem to be following this configuration.</p>

<p>After a fair bit of googling and help from the <code>#engineyard</code> IRC channel, this is what we did to fix it.<br/>
Add the following lines to <code>/data/nginx/nginx.conf</code> inside the <code>http{}</code> block (replacing 300 with the timeout you need).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">client_header_timeout</span> <span class="mi">300</span><span class="p">;</span>
</span><span class='line'><span class="k">client_body_timeout</span> <span class="mi">300</span><span class="p">;</span>
</span><span class='line'><span class="k">send_timeout</span> <span class="mi">300</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And restart nginx/unicorn with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/nginx reload
</span><span class='line'><span class="nv">$ </span>/engineyard/bin/app_&lt;app_name&gt; reload
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Lambdas for Date-based Rails Scopes]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/04/08/use-lambdas-for-date-based-rails-scopes/"/>
    <updated>2013-04-08T00:26:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/04/08/use-lambdas-for-date-based-rails-scopes</id>
    <content type="html"><![CDATA[<p>A scope allows you to specify an ARel query that can be used as a method call to the model (or association objects).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:delivered</span><span class="p">,</span> <span class="n">where</span><span class="p">(</span><span class="ss">delivered</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Item</span><span class="o">.</span><span class="n">delivered</span><span class="o">.</span><span class="n">to_sql</span>                     <span class="c1"># SELECT &quot;items&quot;.* FROM &quot;items&quot;  WHERE &quot;items&quot;.&quot;delivered&quot; = &#39;t&#39;</span>
</span><span class='line'><span class="no">Item</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">price</span><span class="p">:</span> <span class="mi">2000</span><span class="p">)</span><span class="o">.</span><span class="n">delivered</span><span class="o">.</span><span class="n">to_sql</span>  <span class="c1"># SELECT &quot;items&quot;.* FROM &quot;items&quot;  WHERE &quot;items&quot;.&quot;price&quot; = 2000 AND &quot;items&quot;.&quot;delivered&quot; = &#39;t&#39; </span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a problem if we try using a scope for a relative date, though.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:expired</span><span class="p">,</span> <span class="n">where</span><span class="p">(</span><span class="s2">&quot;expiry_date &lt; ?&quot;</span><span class="p">,</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code gets evaluated when the server is started, and the <em>output</em> of <code>Date.today</code> is stored in the scope.</p>

<p>That scope is equivalent to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">expired</span>
</span><span class='line'>    <span class="n">where</span><span class="p">(</span><span class="s2">&quot;expiry_date &lt; ?&quot;</span><span class="p">,</span> <span class="s2">&quot;2013-04-01&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The date is hardcoded in there, and will not be changed until the scope is re-evaluated.<br/>
This typically happens only when the server is restarted.</p>

<p>To get around this problem, use a lambda when defining date (or time) based scopes. This will force the evaluation of the scope each time it is <em>called</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:expired</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="s2">&quot;expiry_date &lt; ?&quot;</span><span class="p">,</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Asana From a Cheap Nokia Phone]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/04/06/using-asana-from-a-cheap-nokia-phone/"/>
    <updated>2013-04-06T23:29:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/04/06/using-asana-from-a-cheap-nokia-phone</id>
    <content type="html"><![CDATA[<p>I love <a href="http://asana.com/">Asana</a>. Its made me a lot more organized than I used to be.</p>

<p>I&#8217;d love to be able to check my tasks when I&#8217;m not at a computer, but my phone looks like this.</p>

<p><img src="http://blog.timothyandrew.net/images/c2-01.jpg" alt="Nokia C2-01" /></p>

<p>There&#8217;s no way the Asana app will load on its Opera Mini browser.</p>

<p>It does have email, though. And Asana lets me <a href="http://asana.com/guide/tags-email/email-basics">send tasks</a> in via email.</p>

<p>Unfortunately, there seems to be no way to actually <em>view</em> all your tasks from a phone like this.</p>

<p><strong>Until now.</strong></p>

<p>I wrote a small <a href="http://sinatrarb.com/">Sinatra</a> app that pulls my tasks from Asana and displays them on a simple HTML page. It&#8217;s very rough around the edges, but works well enough for my needs. You can grab the code and set it up <a href="http://github.com/timothyandrew/asana-light">here</a>.</p>

<p>There is <strong><em>no</em> authentication</strong> yet, so anyone with a link can view your tasks.</p>

<p>Read on for an explanation of how it works.</p>

<!-- more -->


<p>Luckily for us, there&#8217;s a ruby interface to Asana&#8217;s REST API in the form of the <a href="http://github.com/rbright/asana">asana gem</a>, which we can use to pull all our tasks from Asana.</p>

<p>First, we need to get the API key for our Asana account for authentication.</p>

<ul>
<li>Login to Asana</li>
<li>Visit this link: <a href="http://app.asana.com/-/account_api">http://app.asana.com/-/account_api</a></li>
<li>Copy the API key.</li>
</ul>


<p>We use this to set up the gem.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Asana</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">client</span><span class="o">|</span>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="s2">&quot;YOUR_API_KEY&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to get all your tasks. We get all the tasks assigned to you from each of your workspaces and put them all in one array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="ss">Asana</span><span class="p">:</span><span class="ss">:User</span><span class="o">.</span><span class="n">me</span>
</span><span class='line'><span class="n">workspaces</span> <span class="o">=</span> <span class="ss">Asana</span><span class="p">:</span><span class="ss">:Workspace</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="n">tasks</span> <span class="o">=</span> <span class="n">workspaces</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="n">workspace</span><span class="o">|</span>
</span><span class='line'>    <span class="n">memo</span> <span class="o">&lt;&lt;</span> <span class="n">workspace</span><span class="o">.</span><span class="n">tasks</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">memo</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span><span class="n">flatten</span>
</span></code></pre></td></tr></table></div></figure>


<p>We send all this to this ERB template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;html&gt;&lt;body&gt;</span>
</span><span class='line'><span class="x">  &lt;ul&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="n">tasks</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">task</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">      &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">task</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/ul&gt;</span>
</span><span class='line'><span class="x">&lt;/body&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which renders the tasks in a format any browser can comfortably read.<br/>
And that&#8217;s pretty much all the code that&#8217;s necessary.</p>

<hr />

<p>There are a lot of ways this can be improved, I&#8217;m sure. Off the top of my head:</p>

<ul>
<li>Group tasks by workspace</li>
<li>Sort tasks by date</li>
<li>Add authentication. Anyone who visits the URL shouldn&#8217;t be able to see all your tasks.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Swipe.js to swipe between pages of a web app]]></title>
    <link href="http://blog.timothyandrew.net/blog/2013/04/05/using-swipe-dot-js-to-swipe-between-pages-of-a-web-app/"/>
    <updated>2013-04-05T21:45:00+05:30</updated>
    <id>http://blog.timothyandrew.net/blog/2013/04/05/using-swipe-dot-js-to-swipe-between-pages-of-a-web-app</id>
    <content type="html"><![CDATA[<p>I was working with <a href="http://deobald.ca/">Steven</a> on <a href="http://github.com/deobald/jok">Jok</a> today.</p>

<p>We were converting a two page (well 3, actually) page web application into a single page application that let you swipe between pages on mobile device but worked the same on a desktop browser.</p>

<p>Here&#8217;s how that&#8217;s done.</p>

<p>First, download the <a href="http://swipejs.com/">Swipe.js</a> plugin.</p>

<p>You need the markup for all your pages in a single HTML file, wrapped with two <code>divs</code> that Swipe uses.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;slider&#39;</span> <span class="na">class=</span><span class="s">&#39;swipe&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;swipe-wrap&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Page 1
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;page&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Page 2
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we need to setup Swipe.js.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mySwipe</span> <span class="o">=</span> <span class="nx">Swipe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;slider&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">mySwipe</span><span class="p">.</span><span class="nx">setup</span><span class="p">();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need some CSS styles too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.swipe</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">visibility</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.swipe-wrap</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.swipe-wrap</span> <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span><span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">min-height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">html</span><span class="o">,</span><span class="nt">body</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve added styles to make each page have a <code>100%</code> height, so that our background-color spans the entire page.</p>

<p>This should allow navigating between the pages by swiping on a mobile device.<br/>
On a desktop, though, there&#8217;s no way to switch between pages.</p>

<p>Swipe.js doesn&#8217;t detect swipe-like events from the mouse, so we need to add buttons to the page for navigation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;left-arrow&quot;</span>
</span><span class='line'>     <span class="na">style=</span><span class="s">&quot;font-size: 50px; position: absolute; left: 0%; top: 50%; z-index: 1000;&quot;</span>
</span><span class='line'>     <span class="na">onclick=</span><span class="s">&quot;javascript:window.mySwipe.prev();&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;right-arrow&quot;</span>
</span><span class='line'>     <span class="na">style=</span><span class="s">&quot;font-size: 50px; position: absolute; right: 0%; top: 50%; z-index: 1000;&quot;</span>
</span><span class='line'>     <span class="na">onclick=</span><span class="s">&quot;javascript:window.mySwipe.next();&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This adds a button on each side of the page which allow navigating to the previous/next pages.</p>

<p>Pretty straight-forward so far. There&#8217;s two problems with this approach, though.</p>

<ul>
<li>When a page is taller than the height of the viewport, a scrollbar shows up on all pages.<br/>
<em>This is not too bad. We could probably live with this.</em></li>
<li>If we scroll way down on a page, and then switch page, the new page will preserve the scroll position of the previous page. This can be particularly annoying if you have one really tall page and another short page.</li>
</ul>


<p>We solved this problem by caching the scroll position for each page, and then scrolling to that position when the page was changed.</p>

<p>To hook into the page change event, we need to pass a function into the Swipe.js initializer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">otherScroll</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cb</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">oldScroll</span> <span class="o">=</span> <span class="nx">otherScroll</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">otherScroll</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">body</span><span class="p">.</span><span class="nx">scrollTop</span> <span class="o">=</span> <span class="nx">oldScroll</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mySwipe</span> <span class="o">=</span> <span class="nx">Swipe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;slider&#39;</span><span class="p">),</span> <span class="p">{</span> <span class="nx">callback</span><span class="o">:</span> <span class="nx">cb</span> <span class="p">});</span>
</span><span class='line'><span class="nx">mySwipe</span><span class="p">.</span><span class="nx">setup</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works okay for a two page app. If you&#8217;ve got more pages, you&#8217;ll have to cache the scroll positions for each page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">positions</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">currentPage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cb</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">positions</span><span class="p">[</span><span class="nx">currentPage</span><span class="p">]</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">scrollTop</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">body</span><span class="p">.</span><span class="nx">scrollTop</span> <span class="o">=</span> <span class="nx">positions</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">currentPage</span> <span class="o">=</span> <span class="nx">index</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">mySwipe</span> <span class="o">=</span> <span class="nx">Swipe</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;slider&#39;</span><span class="p">),</span> <span class="p">{</span> <span class="nx">callback</span><span class="o">:</span> <span class="nx">cb</span> <span class="p">});</span>
</span><span class='line'><span class="nx">mySwipe</span><span class="p">.</span><span class="nx">setup</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
